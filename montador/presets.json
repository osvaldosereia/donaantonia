/* ===== Presets (presets.json) ===== */
MT.presets = MT.presets || { presets: [] };

/* Botão + Picker no topo */
function renderPresetPicker(){
  const host = document.querySelector('.mt-actions');
  if(!host || host.querySelector('#btnPreset')) return;

  const btn = document.createElement('button');
  btn.id = 'btnPreset';
  btn.className = 'mt-btn';
  btn.textContent = 'Presets';
  host.insertBefore(btn, host.firstChild);

  btn.onclick = openPresetPicker;
}

function openPresetPicker(){
  const list = MT.presets.presets || [];
  if(!list.length){ alert('Nenhum preset disponível.'); return; }

  // UI simples: dropdown inline
  let box = document.getElementById('presetBox');
  if(box){ box.remove(); }
  box = document.createElement('div');
  box.id = 'presetBox';
  box.style.position='absolute';
  box.style.top='56px';
  box.style.right='16px';
  box.style.background='#fff';
  box.style.border='1px solid #e5e7eb';
  box.style.borderRadius='10px';
  box.style.padding='10px';
  box.style.zIndex='20';
  box.style.minWidth='280px';

  const sel = document.createElement('select');
  sel.className = 'mt-select';
  sel.style.width='100%';
  list.forEach(p=>{
    const o=document.createElement('option');
    o.value=p.id; o.textContent=p.label || p.id;
    sel.appendChild(o);
  });

  const actions = document.createElement('div');
  actions.style.display='flex'; actions.style.gap='8px'; actions.style.marginTop='8px';
  const apply = document.createElement('button');
  apply.className='mt-btn primary'; apply.textContent='Aplicar';
  const close = document.createElement('button');
  close.className='mt-btn'; close.textContent='Fechar';

  actions.appendChild(apply); actions.appendChild(close);
  box.appendChild(sel); box.appendChild(actions);
  document.body.appendChild(box);

  close.onclick = ()=> box.remove();
  apply.onclick = ()=>{
    const id = sel.value;
    applyPreset(id);
    box.remove();
  };
}

/* Aplica preset no Canvas */
function applyPreset(presetId){
  const p = (MT.presets.presets||[]).find(x=>x.id===presetId);
  if(!p){ alert('Preset não encontrado.'); return; }

  // zera canvas atual
  MT.draft.blocks = [];

  // cria blocos do preset
  (p.blocks||[]).forEach(bid=>{
    const def = MT.catalog.blocks.find(b=>b.id===bid);
    if(!def) return;
    const node = cloneNodeFromDef(def);
    MT.draft.blocks.push(node);
  });

  // habilita subblocos
  if(p.enabledChildren){
    Object.entries(p.enabledChildren).forEach(([rootId, childIds])=>{
      const root = MT.draft.blocks.find(b=>b.id===rootId);
      if(!root || !Array.isArray(root.children)) return;
      function enableChildById(node, id){
        if(node.id===id){ node.enabled=true; return true; }
        if(node.children){
          return node.children.some(ch=> enableChildById(ch, id));
        }
        return false;
      }
      childIds.forEach(cid=>{
        // tenta no nível 1
        const c1 = root.children.find(c=>c.id===cid);
        if(c1){ c1.enabled=true; return; }
        // tenta recursivo
        root.children.forEach(ch=> enableChildById(ch, cid));
      });
    });
  }

  // overrides de funções (globais por bloco raiz)
  if(p.funcoesOverrides){
    MT.draft.blocks.forEach(b=>{
      Object.entries(p.funcoesOverrides).forEach(([k,v])=>{
        const i = b.funcoes.findIndex(x=>x.startsWith(k+'='));
        const pair = `${k}=${v}`;
        if(i>=0) b.funcoes[i]=pair; else b.funcoes.push(pair);
      });
    });
  }

  // variações por bloco
  if(p.variacoes){
    Object.entries(p.variacoes).forEach(([bid,vari])=>{
      const blk = MT.draft.blocks.find(x=>x.id===bid);
      if(blk) blk.variacao = vari;
    });
  }

  saveDraft();
  renderCanvas();
  selectBlock(0);
  alert('Preset aplicado ao Canvas.');
}
